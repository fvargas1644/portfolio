---
interface Props {
  id: string;
  showDots?: boolean;
  showArrows?: boolean;
  autoplay?: boolean;
  interval?: number;
  slidesToShow?: number;
}

const { 
  id, 
  showDots = true, 
  showArrows = true, 
  autoplay = false, 
  interval = 5000,
  slidesToShow = 1
} = Astro.props;
---

<div class="carousel-container relative" data-carousel-id={id}>
  <div class="carousel-track overflow-hidden">
    <div class="carousel-slides flex transition-transform duration-300 ease-in-out">
      <slot />
    </div>
  </div>
  
  {showArrows && (
    <div class="carousel-controls">
      <button 
        class="carousel-prev absolute top-1/2 left-4 -translate-y-1/2 bg-white/80 text-gray-800 p-2 rounded-full shadow-md hover:bg-white transition-colors z-10"
        aria-label="Anterior"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button 
        class="carousel-next absolute top-1/2 right-4 -translate-y-1/2 bg-white/80 text-gray-800 p-2 rounded-full shadow-md hover:bg-white transition-colors z-10"
        aria-label="Siguiente"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  )}
  
  {showDots && (
    <div class="carousel-dots flex justify-center mt-4 space-x-2">
      <!-- Dots will be added by JavaScript -->
    </div>
  )}
</div>

<script define:vars={{ id, autoplay, interval, slidesToShow }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector(`[data-carousel-id="${id}"]`);
    if (!container) return;
    
    const track = container.querySelector('.carousel-slides');
    const slides = Array.from(track.children);
    const dotsContainer = container.querySelector('.carousel-dots');
    const prevButton = container.querySelector('.carousel-prev');
    const nextButton = container.querySelector('.carousel-next');
    
    let currentIndex = 0;
    let autoplayInterval;
    
    // Clone slides for infinite loop if needed
    if (slides.length > 1) {
      // Add clones at the end
      for (let i = 0; i < slidesToShow; i++) {
        const clone = slides[i].cloneNode(true);
        track.appendChild(clone);
      }
      
      // Add clones at the beginning
      for (let i = slides.length - 1; i >= slides.length - slidesToShow; i--) {
        const clone = slides[i].cloneNode(true);
        track.insertBefore(clone, track.firstChild);
      }
    }
    
    // Recalculate slides after cloning
    const allSlides = Array.from(track.children);
    
    // Set initial position
    updateSlidePosition(slidesToShow);
    
    // Create dots
    if (dotsContainer && slides.length > 1) {
      slides.forEach((_, index) => {
        const dot = document.createElement('button');
        dot.classList.add('carousel-dot', 'w-3', 'h-3', 'rounded-full', 'bg-gray-300');
        dot.setAttribute('aria-label', `Go to slide ${index + 1}`);
        dot.addEventListener('click', () => goToSlide(index));
        dotsContainer.appendChild(dot);
      });
      
      updateActiveDot(0);
    }
    
    // Add event listeners
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        goToSlide(currentIndex - 1);
        resetAutoplay();
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        goToSlide(currentIndex + 1);
        resetAutoplay();
      });
    }
    
    // Functions
    function updateSlidePosition(offset = 0) {
      const slideWidth = 100 / slidesToShow;
      allSlides.forEach((slide, index) => {
        slide.style.flexBasis = `${slideWidth}%`;
        slide.style.minWidth = `${slideWidth}%`;
      });
      
      const translateX = -((currentIndex + offset) * (100 / slidesToShow));
      track.style.transform = `translateX(${translateX}%)`;
    }
    
    function updateActiveDot(index) {
      if (!dotsContainer) return;
      
      const dots = Array.from(dotsContainer.children);
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.remove('bg-gray-300');
          dot.classList.add('bg-blue-600');
        } else {
          dot.classList.remove('bg-blue-600');
          dot.classList.add('bg-gray-300');
        }
      });
    }
    
    function goToSlide(index) {
      // Handle infinite loop
      if (slides.length > 1) {
        if (index < 0) {
          // Jump to end
          currentIndex = slides.length - 1;
          updateSlidePosition(slidesToShow);
          
          // Use setTimeout to create a smooth transition after the jump
          setTimeout(() => {
            track.style.transition = 'none';
            currentIndex = slides.length - 1;
            updateSlidePosition();
            setTimeout(() => {
              track.style.transition = 'transform 300ms ease-in-out';
            }, 50);
          }, 300);
        } else if (index >= slides.length) {
          // Jump to beginning
          currentIndex = 0;
          updateSlidePosition(slidesToShow);
          
          setTimeout(() => {
            track.style.transition = 'none';
            currentIndex = 0;
            updateSlidePosition();
            setTimeout(() => {
              track.style.transition = 'transform 300ms ease-in-out';
            }, 50);
          }, 300);
        } else {
          currentIndex = index;
          updateSlidePosition(slidesToShow);
        }
        
        updateActiveDot(currentIndex);
      }
    }
    
    function startAutoplay() {
      if (autoplay && slides.length > 1) {
        autoplayInterval = setInterval(() => {
          goToSlide(currentIndex + 1);
        }, interval);
      }
    }
    
    function resetAutoplay() {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        startAutoplay();
      }
    }
    
    // Initialize autoplay
    startAutoplay();
    
    // Handle visibility change to pause autoplay when tab is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        clearInterval(autoplayInterval);
      } else {
        startAutoplay();
      }
    });
    
    // Handle touch events for swipe
    let touchStartX = 0;
    let touchEndX = 0;
    
    container.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });
    
    container.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });
    
    function handleSwipe() {
      const swipeThreshold = 50;
      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe left
        goToSlide(currentIndex + 1);
        resetAutoplay();
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe right
        goToSlide(currentIndex - 1);
        resetAutoplay();
      }
    }
  });
</script>

<style>
  .carousel-slide {
    flex-shrink: 0;
  }
</style>

